# -*- coding: utf-8 -*-
"""Lista11_Classificacao.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f4DPoa0GWtKLiBPag0-u3zaRAIChdmnC

# ESCOLA POLITÉCNICA DA UNIVERSIDADE DE SÃO PAULO

## PQI 3403 Análise de Processos da Indústria Química 2021

### Lista de Exercícios 11 - Classificação
"""

# Aluna: Ana Clara Duarte NUSP 10884260
# Aluno: Lucas Gobatto Bisaio NUSP 10771006

# Bibliotecas
import numpy as np # Biblioteca utilizada para trabalhar com vetores
import pandas as pd # Biblioteca para trabalhar com dataframes (planilhas excel)
import matplotlib.pyplot as plt # Biblioteca para criar gráficos "comuns" ao estilo Matlab
import seaborn as sns # Biblioteca utilizada para criar gráficos mais "bonitos"

"""#### Questão 1"""

# Importando o banco de dados (dataset) a ser utilizado (comando necessário para o google colab)

from google.colab import files
uploaded = files.upload()

# Abrir o arquivo csv que contém os dados a serem utilizados durante a prática
wine = pd.read_excel('red_wine_quality.xlsx') # Função que lê e grava o arquivo .csv no formato DataFrame

"""Informação:

* Average Quality = 0
* Good Quality = 1
"""

# Mapa de calor
sns.heatmap(wine.corr(), annot=True) # Desenha a matriz de correlação entre cada um dos dados

# X e y para a Classificação
from sklearn.model_selection import train_test_split
X = wine.drop('sulphates', axis=1).values
y = wine['quality'].values

# Separação entre treino e teste utilizando train_test_split | Dividir o dataset em treinamento (80%) e teste (20%)
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)

# Construção e treinamento do modelo 1

#Importa a biblioteca
from sklearn.linear_model import LogisticRegression
from sklearn import preprocessing
#Assume que você tem X (previsor) e Y (alvo) para dados de treino e x_test(previsor) dos dados de teste
#Cria o objeto de regressão logística
scaler = preprocessing.StandardScaler().fit(X_train)
X_scaled = scaler.transform(X_train)

model = LogisticRegression()
#Treina o modelo usando os dados de treino e confere o score
model.fit(X_scaled, y_train)
#Coeficiente da equação e intercepto
print('Coefficient: \n', model.coef_)
print('Intercept: \n', model.intercept_)

# Construção e treinamento do modelo 2
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)

# Predições
# Regrassão Logistica
LR_predicted= model.predict(X_test)
print("Logistic Regression result:", LR_predicted)

# Método KNN
KNN_predicted = knn.predict(X_test)
print("KNN result:", KNN_predicted)

# Matrix de Confusão modelo 1
from sklearn.metrics import confusion_matrix

LR_cm = confusion_matrix(y_test, LR_predicted)
sns.heatmap(LR_cm, annot=True)

# Matrix de Confusão modelo 2
from sklearn.metrics import confusion_matrix

KNN_cm = confusion_matrix(y_test, KNN_predicted)
sns.heatmap(KNN_cm, annot=True)

# Métricas 
from sklearn.metrics import classification_report

# Modelo 1
LR_cr = classification_report(y_test, LR_predicted, labels=[0,1])
print('Logistic Regression:\n', LR_cr)

# Modelo 2
KNN_cr= classification_report(y_test, KNN_predicted, labels=[0,1])
print('KNN:\n', KNN_cr)

"""#### Questão 2"""



